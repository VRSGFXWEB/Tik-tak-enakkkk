<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Tic Tac Toe Traser Game</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap');

    * {
      box-sizing: border-box;
      font-family: 'Orbitron', sans-serif;
    }

    body {
      margin: 0;
      padding: 0;
      background: linear-gradient(135deg, #000000, #111d1f);
      color: #00ffe1;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      overflow: hidden;
    }

    .glow-title {
      font-size: 2.5em;
      color: #00ffe1;
      text-align: center;
      text-shadow: 0 0 10px #00ffe1, 0 0 20px #0ff, 0 0 40px #0ff;
      margin-bottom: 20px;
      animation: glowAnim 3s infinite alternate;
    }

    @keyframes glowAnim {
      0% { text-shadow: 0 0 10px #00ffe1; }
      100% { text-shadow: 0 0 30px #0ff, 0 0 50px #0ff; }
    }

    .screen {
      display: none;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      animation: fadeIn 1s ease-in-out;
      width: 100%;
    }

    .active {
      display: flex;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.95); }
      to { opacity: 1; transform: scale(1); }
    }

    input, select, button {
      background: #000;
      border: 2px solid #00ffe1;
      color: #00ffe1;
      padding: 10px 20px;
      margin: 10px;
      font-size: 1em;
      border-radius: 10px;
      outline: none;
      transition: 0.3s;
      box-shadow: 0 0 10px #00ffe1;
    }

    button:hover {
      background: #00ffe1;
      color: #000;
      box-shadow: 0 0 20px #00ffe1;
    }

    #gameBoard {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      gap: 10px;
      margin: 20px;
    }

    .cell {
      width: 100px;
      height: 100px;
      font-size: 2.5em;
      background: #111;
      border: 2px solid #00ffe1;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      color: #00ffe1;
      text-shadow: 0 0 5px #0ff;
    }

    .cell:hover {
      background: #222;
      box-shadow: 0 0 10px #00ffe1;
    }

    #result {
      font-size: 1.5em;
      text-align: center;
      margin-top: 10px;
      padding: 10px;
      color: #0f0;
      background: rgba(0, 255, 0, 0.1);
      border: 2px solid #0f0;
      border-radius: 10px;
      animation: flash 1s ease-in-out infinite alternate;
    }

    @keyframes flash {
      from { box-shadow: 0 0 10px #0f0; }
      to { box-shadow: 0 0 20px #0f0; }
    }

    audio {
      position: absolute;
      top: 10px;
      left: 10px;
    }

    .neon-border {
      border: 2px solid #0ff;
      padding: 20px;
      border-radius: 15px;
      box-shadow: 0 0 20px #0ff;
    }
  </style>
</head>
<body>
  <audio autoplay loop>
    <source src="https://cdn.pixabay.com/audio/2023/03/22/audio_3e20e0d0fd.mp3" type="audio/mpeg">
  </audio>

  <div id="loginScreen" class="screen active neon-border">
    <div class="glow-title">Tic Tac Toe Traser Game</div>
    <input type="text" id="playerName" placeholder="Masukkan Nama Kamu">
    <button onclick="goToMenu()">Masuk</button>
  </div>

  <div id="menuScreen" class="screen neon-border">
    <div class="glow-title">Selamat Datang, <span id="showName"></span></div>
    <button onclick="startGame('2p')">Main Berdua</button>
    <button onclick="selectAIMode()">Lawan AI</button>
    <select id="aiLevel" style="display:none;" onchange="startGame('ai')">
      <option value="">Pilih Level AI</option>
      <option value="easy">Mudah</option>
      <option value="normal">Normal</option>
      <option value="hard">Susah</option>
    </select>
  </div>

  <div id="gameScreen" class="screen neon-border">
    <div id="turnInfo" class="glow-title"></div>
    <div id="gameBoard"></div>
    <div id="result"></div>
    <button onclick="goToMenu()">Kembali ke Menu</button>
  </div>

  <script>
    let playerName = '';
    let currentPlayer = 'X';
    let board = Array(9).fill(null);
    let gameMode = '2p';
    let aiLevel = 'easy';

    function showScreen(id) {
      document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
      document.getElementById(id).classList.add('active');
    }

    function goToMenu() {
      playerName = document.getElementById('playerName').value || 'Player';
      document.getElementById('showName').innerText = playerName;
      showScreen('menuScreen');
    }

    function selectAIMode() {
      document.getElementById('aiLevel').style.display = 'inline-block';
    }

    function startGame(mode) {
      gameMode = mode;
      if (mode === 'ai') aiLevel = document.getElementById('aiLevel').value;
      board = Array(9).fill(null);
      currentPlayer = 'X';
      showScreen('gameScreen');
      renderBoard();
      updateTurnInfo();
      document.getElementById('result').innerText = '';
    }

    function updateTurnInfo() {
      document.getElementById('turnInfo').innerText = `Giliran: ${currentPlayer}`;
    }

    function renderBoard() {
      const boardEl = document.getElementById('gameBoard');
      boardEl.innerHTML = '';
      board.forEach((cell, idx) => {
        const div = document.createElement('div');
        div.className = 'cell';
        div.innerText = cell || '';
        div.onclick = () => handleMove(idx);
        boardEl.appendChild(div);
      });
    }

    function handleMove(index) {
      if (board[index] || checkWinner()) return;
      board[index] = currentPlayer;
      renderBoard();
      const winner = checkWinner();
      if (winner) return showResult(`${winner} menang!`);
      currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      updateTurnInfo();
      if (gameMode === 'ai' && currentPlayer === 'O') {
        setTimeout(aiMove, 500);
      }
    }

    function showResult(msg) {
      document.getElementById('result').innerText = msg;
    }

    function checkWinner() {
      const wins = [
        [0,1,2],[3,4,5],[6,7,8],
        [0,3,6],[1,4,7],[2,5,8],
        [0,4,8],[2,4,6]
      ];
      for (let [a,b,c] of wins) {
        if (board[a] && board[a] === board[b] && board[a] === board[c]) return board[a];
      }
      if (board.every(cell => cell)) return 'Seri';
      return null;
    }

    function aiMove() {
      let index;
      if (aiLevel === 'easy') {
        const empty = board.map((v, i) => v === null ? i : null).filter(v => v !== null);
        index = empty[Math.floor(Math.random() * empty.length)];
      } else {
        index = getBestMove();
      }
      handleMove(index);
    }

    function getBestMove() {
      let bestScore = -Infinity;
      let move;
      for (let i = 0; i < board.length; i++) {
        if (board[i] === null) {
          board[i] = 'O';
          let score = minimax(board, 0, false);
          board[i] = null;
          if (score > bestScore) {
            bestScore = score;
            move = i;
          }
        }
      }
      return move;
    }

    function minimax(board, depth, isMax) {
      const winner = checkWinner();
      if (winner === 'O') return 10 - depth;
      if (winner === 'X') return depth - 10;
      if (winner === 'Seri') return 0;

      if (isMax) {
        let best = -Infinity;
        for (let i = 0; i < board.length; i++) {
          if (board[i] === null) {
            board[i] = 'O';
            best = Math.max(best, minimax(board, depth + 1, false));
            board[i] = null;
          }
        }
        return best;
      } else {
        let best = Infinity;
        for (let i = 0; i < board.length; i++) {
          if (board[i] === null) {
            board[i] = 'X';
            best = Math.min(best, minimax(board, depth + 1, true));
            board[i] = null;
          }
        }
        return best;
      }
    }

    document.getElementById('playerName').addEventListener('keypress', function(e) {
      if (e.key === 'Enter') goToMenu();
    });
  </script>
</body>
</html>
